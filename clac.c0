#use <string>
#use <util>

int pow(int x, int y)
//@requires y>=0;
{
    if (y==0){return 1;}else{return x*pow(x,y-1);}
}

void eval(istack_t S, queue_t Q)
//@requires S != NULL && Q != NULL;
//@ensures queue_empty(Q);
{
    while (!queue_empty(Q)){
        string tok = deq(Q);
        if (string_equal(tok,"+")){
            int x;
            int y;
            if (!istack_empty(S)){
                y = ipop(S);
                if (!istack_empty(S)){
                    x = ipop(S);
                    ipush(S,x+y);
                }else {error("error");return;}
            }else {error("error");return;}
        }else if (string_equal(tok,"-")){
            int x;
            int y;
            if (!istack_empty(S)){
                y = ipop(S);
                if (!istack_empty(S)){
                    x = ipop(S);
                    ipush(S,x-y);
                }else {error("error");return;}
            }else {error("error");return;}
        }else if (string_equal(tok,"*")){
            int x;
            int y;
            if (!istack_empty(S)){
                y = ipop(S);
                if (!istack_empty(S)){
                    x = ipop(S);
                    ipush(S,x*y);
                }else {error("error");return;}
            }else {error("error");return;}
        }else if (string_equal(tok,"/")){
            int x;
            int y;
            if (!istack_empty(S)){
                y = ipop(S);
                if (!istack_empty(S)){
                    x = ipop(S);
                    if ((y==0) || (x==int_min() && y==-1)){
                        error("error");
                    }else{ipush(S,x/y);}
                }else {error("error");return;}
            }else {error("error");return;}
        }else if (string_equal(tok,"**")){
            int x;
            int y;
            if (!istack_empty(S)){
                y = ipop(S);
                if (!istack_empty(S)){
                    x = ipop(S);
                    if (y<0){
                        error("error");
                    }else{ipush(S,pow(x,y));}
                }else {error("error");return;}
            }else {error("error");return;}
        }else {
            int* i = parse_int(tok, 10);
            if (i == NULL) {
                error("error");
            }
            ipush(S, *i);
        }
    }
    return;
}